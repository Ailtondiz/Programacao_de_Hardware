
TP1_171912.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070a  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061e  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030d  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000015a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay_1s>:
#include <avr/io.h>

delay_1s:
		rcall delay_100ms
  80:	0a d0       	rcall	.+20     	; 0x96 <delay_100ms>
		rcall delay_100ms
  82:	09 d0       	rcall	.+18     	; 0x96 <delay_100ms>
		rcall delay_100ms
  84:	08 d0       	rcall	.+16     	; 0x96 <delay_100ms>
		rcall delay_100ms
  86:	07 d0       	rcall	.+14     	; 0x96 <delay_100ms>
		rcall delay_100ms
  88:	06 d0       	rcall	.+12     	; 0x96 <delay_100ms>
		rcall delay_100ms
  8a:	05 d0       	rcall	.+10     	; 0x96 <delay_100ms>
		rcall delay_100ms
  8c:	04 d0       	rcall	.+8      	; 0x96 <delay_100ms>
		rcall delay_100ms
  8e:	03 d0       	rcall	.+6      	; 0x96 <delay_100ms>
		rcall delay_100ms
  90:	02 d0       	rcall	.+4      	; 0x96 <delay_100ms>
		rcall delay_100ms
  92:	01 d0       	rcall	.+2      	; 0x96 <delay_100ms>
		ret
  94:	08 95       	ret

00000096 <delay_100ms>:

delay_100ms:
		rcall delay_10ms
  96:	0a d0       	rcall	.+20     	; 0xac <delay_10ms>
		rcall delay_10ms
  98:	09 d0       	rcall	.+18     	; 0xac <delay_10ms>
		rcall delay_10ms
  9a:	08 d0       	rcall	.+16     	; 0xac <delay_10ms>
		rcall delay_10ms
  9c:	07 d0       	rcall	.+14     	; 0xac <delay_10ms>
		rcall delay_10ms
  9e:	06 d0       	rcall	.+12     	; 0xac <delay_10ms>
		rcall delay_10ms
  a0:	05 d0       	rcall	.+10     	; 0xac <delay_10ms>
		rcall delay_10ms
  a2:	04 d0       	rcall	.+8      	; 0xac <delay_10ms>
		rcall delay_10ms
  a4:	03 d0       	rcall	.+6      	; 0xac <delay_10ms>
		rcall delay_10ms
  a6:	02 d0       	rcall	.+4      	; 0xac <delay_10ms>
		rcall delay_10ms
  a8:	01 d0       	rcall	.+2      	; 0xac <delay_10ms>
		ret
  aa:	08 95       	ret

000000ac <delay_10ms>:

delay_10ms:
		rcall delay_1ms
  ac:	0a d0       	rcall	.+20     	; 0xc2 <delay_1ms>
		rcall delay_1ms
  ae:	09 d0       	rcall	.+18     	; 0xc2 <delay_1ms>
		rcall delay_1ms
  b0:	08 d0       	rcall	.+16     	; 0xc2 <delay_1ms>
		rcall delay_1ms
  b2:	07 d0       	rcall	.+14     	; 0xc2 <delay_1ms>
		rcall delay_1ms
  b4:	06 d0       	rcall	.+12     	; 0xc2 <delay_1ms>
		rcall delay_1ms
  b6:	05 d0       	rcall	.+10     	; 0xc2 <delay_1ms>
		rcall delay_1ms
  b8:	04 d0       	rcall	.+8      	; 0xc2 <delay_1ms>
		rcall delay_1ms
  ba:	03 d0       	rcall	.+6      	; 0xc2 <delay_1ms>
		rcall delay_1ms
  bc:	02 d0       	rcall	.+4      	; 0xc2 <delay_1ms>
		rcall delay_1ms
  be:	01 d0       	rcall	.+2      	; 0xc2 <delay_1ms>
		ret
  c0:	08 95       	ret

000000c2 <delay_1ms>:

delay_1ms:
		push r16; salva o valor em r16
  c2:	0f 93       	push	r16
		ldi r16,99; determina o valor de r16, que seriam quantas vezes ele vai ter que fazer o loop
  c4:	03 e6       	ldi	r16, 0x63	; 99

000000c6 <delay_1ms1>:
	...
			nop; gasta 1 ciclo
			nop; gasta 1 ciclo
			nop; gasta 1 ciclo
			nop; gasta 1 ciclo
			nop; gasta 1 ciclo
		dec r16
  da:	0a 95       	dec	r16
		brne delay_1ms1
  dc:	a1 f7       	brne	.-24     	; 0xc6 <delay_1ms1>
		pop r16; restore value no r16
  de:	0f 91       	pop	r16
		ret
  e0:	08 95       	ret

000000e2 <INICIO>:
#include <avr/io.h>
#include "delay.S"

.global INICIO
	INICIO:
		ldi r17, 0b00001111
  e2:	1f e0       	ldi	r17, 0x0F	; 15
		ldi r18, 0b11110000 
  e4:	20 ef       	ldi	r18, 0xF0	; 240
		out DDRD, r17
  e6:	1a bd       	out	0x2a, r17	; 42

000000e8 <LOOP>:
	LOOP:
		out PORTD, r17
  e8:	1b bd       	out	0x2b, r17	; 43
		rcall delay_1s
  ea:	ca df       	rcall	.-108    	; 0x80 <delay_1s>
		out PORTD, r18
  ec:	2b bd       	out	0x2b, r18	; 43
		rcall delay_1s
  ee:	c8 df       	rcall	.-112    	; 0x80 <delay_1s>
		ret
  f0:	08 95       	ret

000000f2 <main>:

int main(void)
{
    while (1) 
    {
		INICIO();
  f2:	0e 94 71 00 	call	0xe2	; 0xe2 <INICIO>
  f6:	fd cf       	rjmp	.-6      	; 0xf2 <main>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
